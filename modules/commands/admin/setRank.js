/* ----------------------------------
    < COMMAND > --- < SET RANK >
----------------------------------- */

// ----- < [ CONFIG ] - TH√îNG TIN V·ªÄ L·ªÜNH > ----- //
const config = {
    name: "setRank",
    description: "L·ªánh ch·ªânh Rank ng∆∞·ªùi d√πng.",
    type: "admin",
    usage: "/kiki setRank [ TAG ] [ RANK ]",
    condition: ["setrank", "set rank", "rank"],
    exception: [],
    permission: 3
}

// ----- < [ H√ÄM ] - X·ª¨ L√ç L·ªÜNH > ----- //
async function onCall({ message, args }) {
    await message.react("‚è±");

    const { updateUsersInfo, random, checkMessage } = global.function;
    const rankPermission = {
        "ADMINISTRATOR": 5,
        "MODERATOR": 1,
        "USER": 0
    }
    const errorSentences = [
        "ƒê√©o ƒëc ƒë·∫°i ka ∆°i :) l·ªói cmnr",
        "Anh ∆°i em lam d√©o dc, b·ªã con kac j r",
        "Loi cmnr üôÇ Ad ngu",
        "Loi roi thg ngu üôÇ",
        "Anh Quan oi loi cmnr üôÇ"
    ];
    const notFoundRankSentences = [
        "rank lon que j v üôÇ",
        "m setRank ccj v?",
        "thg ad ngu, c√≥ c√°i rank c≈©ng ƒë bt üôÇ",
        "Ph·∫ø ƒë√©o ch·ªãu ƒëc, rank loz que j ƒë·∫•y üôÇ",
        "Th·ªÅ ch·ª© oog n·ªôi t c√≤n ƒë bt m set c√°i rank j üôÇ"
    ];
    const rankUpSentences = [
        "Ok em cho n√≥ l√™n rank r do üòè",
        "R t thƒÉng rank cho n√≥ r üòè",
        "Roi üôÇ",
        "Cai me j cx k√™u t üôÇ",
        "Roi roi, c√°i loz j cx t·ªõi tay üôÇ"
    ];
    const rankDownSentences = [
        "Roi t giam h·∫°ng n√≥ r üòè",
        "r t cho n√≥ cuk xuong r üòè",
        "Giam rank n√≥ r üòè *khinh bi",
        "Roi, giam r",
        "Cai me j cx k√™u t üôÇ",
        "Roi roi, c√°i loz j cx t·ªõi tay üôÇ"
    ];
    const rankSameSentences = [
        "C√≥ kh√°c m·∫π j ƒë√¢u m√† ƒë·ªïi üôÇ",
        "lm ccj c√≥ khac cha j dau üôÇ",
        "V√¢ng, rank n√≥ v·∫´n y v√¢yj üôÇ",
        "Ngu l·ªìn, rank n√≥ v·∫´n y z üôÇ",
        "Ph·∫ø, kh√°c m·∫π j ƒë√¢u m√† ƒë·ªïi rank üôÇ"
    ];

    try {
        const targetID = Object.keys(message.mentions)[0];
        const targetName = Object.values(message.mentions)[0].replace(/\s+/g, "");
        let targetRank = (args.join("")).replace(targetName, "").toUpperCase();

        if (!targetID || !targetRank) throw(error);
        if (checkMessage(targetRank, ["5", "ADMINISTRATOR", "ADMIN", "AD"])) targetRank = "ADMINISTRATOR";
        else if (checkMessage(targetRank, ["1", "MODERATOR", "MOD"])) targetRank = "MODERATOR";
        else if (checkMessage(targetRank, ["0", "USER"])) targetRank = "USER";
        else {
            message.react("‚≠ïÔ∏è");
            message.reply(notFoundRankSentences[random(0, notFoundRankSentences.length)]);
            return;
        }
        
        const targetPermission = rankPermission[targetRank];
        const previousPermission = rankPermission[global.usersInfo[targetID].rank];
        if (targetPermission == previousPermission) {
            message.react("‚≠ïÔ∏è");
            message.reply(rankSameSentences[random(0, rankSameSentences.length)]);
            return;
        }

        switch (targetRank) {
            case "ADMINISTRATOR" :
                global.usersInfo[targetID].rank = "ADMINISTRATOR";
                updateUsersInfo(global.usersInfo);
            break;

            case "MODERATOR" :
                global.usersInfo[targetID].rank = "MODERATOR";
                updateUsersInfo(global.usersInfo);
            break;

            case "USER" :
                global.usersInfo[targetID].rank = "USER";
                updateUsersInfo(global.usersInfo);
            break;
        }

        if (targetPermission > previousPermission) message.reply(rankUpSentences[random(0, rankUpSentences.length)]);
        if (targetPermission < previousPermission) message.reply(rankDownSentences[random(0, rankDownSentences.length)]);
        message.react("üîπ");
    } catch(error) {
        console.log(error)
        message.react("‚≠ïÔ∏è");
        message.reply(errorSentences[random(0, errorSentences.length)])
    }
}

// ----- < [ EXPORT ] - XU·∫§T MODULE > ----- //
module.exports = {
    config,
    onCall
}