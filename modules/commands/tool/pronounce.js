/* ---------------------------------
    < COMMAND > --- < PRONOUNCE >
---------------------------------- */

// ----- < [ KHAI B√ÅO ] - REQUIRE MODULE C·∫¶N THI·∫æT > ----- //
const stats = require("word-stats");

// ----- < [ CONFIG ] - TH√îNG TIN V·ªÄ L·ªÜNH > ----- //
const config = {
    name: "pronounce",
    description: "Ph√¢n lo·∫°i v√† nh·∫≠n bi·∫øt √¢m nh·∫•n ti·∫øng Anh.",
    type: "tool",
    usage: "/kiki pronounce [ SEARCH CONTENT ]",
    condition: ["pronounce", "pn", "stress", "str"],
    exception: [],
    permission: 1
}

// ----- < [ H√ÄM ] - X·ª¨ L√ç L·ªÜNH > ----- //
async function onCall({ message, args }) {
    await message.react("‚è±");
    
    const { random, countArrayElement } = global.function;
    const errorSentences = [
        "L·ªói r, thg admin ƒë√¢u lo ƒëi fix ƒëi üôÇ",
        "L·ªói cmnr th·ª≠ l·∫°i ƒëi üôÇ",
        "L·ªói r t·∫°i m ƒë√≥, th·ª≠ l·∫°i ƒëi",
        "ƒÇn ·ªü cak j m√† l·ªói r, th·ª≠ l·∫°i ƒëi üôÇ",
        "Th·ª≠ l·∫°i ƒëi l·ªói cmnr üôÇ",
        "Djt c·ª• m l·ªói r, th·ª≠ l·∫°i xem",
        "L·ªói r , c√≥ c√°i l·ªánh cx k xog üôÇ"
    ];
    const notFoundSentences = [
        "M·ªçe m ƒë ghi n·ªôi dung t bi·∫øt ki·∫øm l·ªìn m·∫π m√†y √†?",
        "ƒê√©o ghi n·ªôi dung ki·∫øm con c·∫∑c b√† m ch·∫Øc ? üôÇ",
        "C√≥ c√°i l·ªánh cx ƒë bt d√πng üôÇ ch·ªãu",
        "M·∫π n√≥ ƒë√£ d√πng l·ªánh th√¨ th√™m c√°i t·ª´ c·∫ßn t√¨m v√¥ d√πm üôÇ"
    ];
    const responeSentences01 = [
        "T·ª´ n√†y nh·∫•n √¢m",
        "Nh·∫•n √¢m",
        "N√†y nh·∫•n √¢m",
        "Nh·∫•n ·ªü √¢m",
        "DƒÉm ba c√°i l√†y nh·∫•n √¢m",
        "Nh·∫•n v√†o √¢m"
    ];
    const responeSentences02 = [
        "DƒÉm ba c√°i l√†y, t·ª´ kh√°c bi·ªát l√†",
        "T·ª´ nh·∫•n ·∫•m kh√°c bi·ªát l√†",
        "T·ª´ nh·∫•n kh√°c bi·ªát l√† t·ª´",
        "T·ª´ nh·∫•n ·∫•m kh√°c l√†",
        "T·ª´ nh·∫•n kh√°c l√†"
    ];

    try {
        switch(args.length) {
            case 0 :
                message.react("‚≠ïÔ∏è");
                message.reply(notFoundSentences[random(0, notFoundSentences.length)]);
            break;

            case 1 :
                const pronounceData = stats(args[0]);
                const stressArray = Array.from(pronounceData.stress);
                let responeData01 = responeSentences01[random(0, responeSentences01.length)];

                if (!pronounceData) throw(error);
                
                stressArray.forEach((stress, index) => {
                    if (stress == "s") responeData01 += " " + (index + 1);
                });

                message.reply(responeData01);
                message.react("üîπ");
            break;

            default :
                let stressValueMap = new Map();
                let stressValueArray = new Array();
                let responeData02 = responeSentences02[random(0, responeSentences02.length)];
                let responeMessage;
                
                for (i = 0; i < args.length; i++) {
                    const pronounceData = stats(args[i]);
                    const stressArray = Array.from(pronounceData.stress);
                    let stressPoint = "";

                    if (!pronounceData) throw(error);

                    stressArray.forEach((stress, index) => {
                        if (stress == "s") stressPoint += " " + (index + 1);
                    });

                    stressValueMap.set(args[i], stressPoint);
                    stressValueArray.push(stressPoint);
                }
                
                stressValueMap.forEach((value, key) => {
                    if (countArrayElement(stressValueArray, value) == 1) responeMessage = responeData02 + ` \"${key}\" - [ Nh·∫•n √¢m${value} ]`;
                })

                if (!responeMessage) throw(error);
                message.reply(responeMessage);
                message.react("üîπ");
        }
    } catch(error) {
        message.react("‚≠ïÔ∏è");
        message.reply(errorSentences[random(0, errorSentences.length)]);
    }
}

// ----- < [ EXPORT ] - XU·∫§T MODULE > ----- //
module.exports = {
    config,
    onCall
}