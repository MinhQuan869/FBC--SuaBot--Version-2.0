/* -------------------------------
    < COMMAND > --- < PORN >
-------------------------------- */

// ----- < [ KHAI B√ÅO ] - REQUIRE MODULE C·∫¶N THI·∫æT > ----- //
const pornpic = require("porn-picture");
const https = require("https");

// ----- < [ CONFIG ] - TH√îNG TIN V·ªÄ L·ªÜNH > ----- //
const config = {
    name: "porn",
    description: "L·ªánh tr·∫£ v·ªÅ ·∫£nh NSFW.",
    type: "porn",
    usage: "/kiki porn [ SEARCH CONTENT ]",
    condition: ["porn"],
    exception: [],
    permission: 0
}

// ----- < [ H√ÄM ] - X·ª¨ L√ç L·ªÜNH > ----- //
async function onCall({ message, args }) {
    await message.react("‚è±");

    let imageUrl;
    const { random } = global.function;
    const errorSentences = [
        "L·ªói r, thg admin ƒë√¢u lo ƒëi fix ƒëi üôÇ",
        "L·ªói cmnr th·ª≠ l·∫°i ƒëi üôÇ",
        "L·ªói r t·∫°i m ƒë√≥, th·ª≠ l·∫°i ƒëi",
        "ƒÇn ·ªü cak j m√† l·ªói r, th·ª≠ l·∫°i ƒëi üôÇ",
        "Th·ª≠ l·∫°i ƒëi l·ªói cmnr üôÇ",
        "Djt c·ª• m l·ªói r, th·ª≠ l·∫°i xem",
        "L·ªói r =)), c√≥ c√°i xem s·∫øch cx k xog"
    ];
    const notFoundSentences = [
        "Porn c√°i l√≤n j v üôÇ",
        "Th·ªÉ lo·∫°i cak j v, t ƒë c√≥ üôÇ",
        "M p·ªèn casiloz j v? T ƒë c√≥ the lo·∫°i ƒë√≥ üôÇ",
        "ƒê c√≥ th·ªÉ lo·∫°i n√†y, h·ªèi thg ad ƒëi l∆∞·ªùi k·ªÉ qu√° üòÄ"
    ];

    try {
        let search = args[0];
        if (!search || args.length > 1) {
            const type = [ "thighs", "ass", "panties", "cosplay", "teen", "catGirl" ];
            search = type[random(0, type.length)];
        }

        switch(search) {
            case "thighs" :
                for (let i = 0; i < 10; i++) {
                    imageUrl = await pornpic.nsfw.thighs();
                    if (imageUrl.endsWith(".png") || imageUrl.endsWith(".jpg") || imageUrl.endsWith(".jpeg")) break;
                    if (i == 9) {
                        message.react("‚≠ïÔ∏è");
                        message.reply(errorSentences[random(0, errorSentences.length)]);
                    }
                }
            break;
            
            case "ass" :
                for (let i = 0; i < 10; i++) {
                    imageUrl = await pornpic.nsfw.ass();
                    if (imageUrl.endsWith(".png") || imageUrl.endsWith(".jpg") || imageUrl.endsWith(".jpeg")) break;
                    if (i == 9) {
                        message.react("‚≠ïÔ∏è");
                        message.reply(errorSentences[random(0, errorSentences.length)]);
                    }
                }
            break;

            case "panties" :
                for (let i = 0; i < 10; i++) {
                    imageUrl = await pornpic.nsfw.panties();
                    if (imageUrl.endsWith(".png") || imageUrl.endsWith(".jpg") || imageUrl.endsWith(".jpeg")) break;
                    if (i == 9) {
                        message.react("‚≠ïÔ∏è");
                        message.reply(errorSentences[random(0, errorSentences.length)]);
                    }
                }
            break;

            case "cosplay" :
                for (let i = 0; i < 10; i++) {
                    imageUrl = await pornpic.nsfw.cosplay();
                    if (imageUrl.endsWith(".png") || imageUrl.endsWith(".jpg") || imageUrl.endsWith(".jpeg")) break;
                    if (i == 9) {
                        message.react("‚≠ïÔ∏è");
                        message.reply(errorSentences[random(0, errorSentences.length)]);
                    }
                }
            break;

            case "teen" :
                for (let i = 0; i < 10; i++) {
                    imageUrl = await pornpic.nsfw.teen();
                    if (imageUrl.endsWith(".png") || imageUrl.endsWith(".jpg") || imageUrl.endsWith(".jpeg")) break;
                    if (i == 9) {
                        message.react("‚≠ïÔ∏è");
                        message.reply(errorSentences[random(0, errorSentences.length)]);
                    }
                }
            break;

            case "catGirl" :
                for (let i = 0; i < 10; i++) {
                    imageUrl = await pornpic.nsfw.catGirl();
                    if (imageUrl.endsWith(".png") || imageUrl.endsWith(".jpg") || imageUrl.endsWith(".jpeg")) break;
                    if (i == 9) {
                        message.react("‚≠ïÔ∏è");
                        message.reply(errorSentences[random(0, errorSentences.length)]);
                    }
                }
            break;

            default :
                message.react("‚≠ïÔ∏è");
                message.reply(notFoundSentences[random(0, notFoundSentences.length)]);
                return;
        }

        https.get(imageUrl, (stream) => { message.reply({ attachment: [stream] }) });
        message.react("üîπ");
    } catch(error) {
        message.react("‚≠ïÔ∏è");
        message.reply(errorSentences[random(0, errorSentences.length)]);
    }
}

// ----- < [ EXPORT ] - XU·∫§T MODULE > ----- //
module.exports = {
    config,
    onCall
}