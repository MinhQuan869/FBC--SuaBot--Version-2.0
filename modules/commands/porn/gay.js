/* ----------------------------
    < COMMAND > --- < GAY >
----------------------------- */

// ----- < [ KHAI B√ÅO ] - REQUIRE MODULE C·∫¶N THI·∫æT > ----- //
const { resolve } = require("path");
const fs = require("fs");
const https = require("https");

// ----- < [ CONFIG ] - TH√îNG TIN V·ªÄ L·ªÜNH > ----- //
const config = {
    name: "gay",
    description: "L·ªánh tr·∫£ v·ªÅ ·∫£nh Gay Porn t·ª´ kho d·ªØ li·ªáu ·∫£nh.",
    type: "porn",
    usage: "/kiki gay [ SEARCH CONTENT ]",
    condition: ["gay", "gayporn", "gay porn", "porngay", "porn gay"],
    exception: ["g√°y"],
    permission: 0
}

// ----- < [ H√ÄM ] - X·ª¨ L√ç L·ªÜNH > ----- //
async function onCall({ message, args }) {
    await message.react("‚è±");

    const { random } = global.function;
    const errorSentences = [
        "L·ªói r, thg admin ƒë√¢u lo ƒëi fix ƒëi üôÇ",
        "L·ªói cmnr th·ª≠ l·∫°i ƒëi üôÇ",
        "L·ªói r t·∫°i m ƒë√≥, th·ª≠ l·∫°i ƒëi",
        "ƒÇn ·ªü cak j m√† l·ªói r, th·ª≠ l·∫°i ƒëi üôÇ",
        "Th·ª≠ l·∫°i ƒëi l·ªói cmnr üôÇ",
        "Djt c·ª• m l·ªói r, th·ª≠ l·∫°i xem",
        "L·ªói r =)), c√≥ c√°i xem s·∫øch cx k xog"
    ];

    try {
        const directory = fs.readdirSync(resolve(global.assetsPath, "nsfw/lgbt_gay/"));
        const dataArray = fs.readFileSync(resolve(global.assetsPath, "nsfw/lgbt_gay/", directory[random(0, directory.length)]), "utf8").split("\n");
        const imageUrl = dataArray[random(0, dataArray.length)].replace(/['"]+/g, "");

        https.get(imageUrl, (stream) => { 
            message.reply({ attachment: [stream] });
            message.react("üîπ");
        });
    } catch(error) {
        message.react("‚≠ïÔ∏è");
        message.reply(errorSentences[random(0, errorSentences.length)])
    }
}

// ----- < [ EXPORT ] - XU·∫§T MODULE > ----- //
module.exports = {
    config,
    onCall
}